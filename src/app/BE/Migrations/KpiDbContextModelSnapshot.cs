// <auto-generated />
using System;
using KpiApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KpiApi.Migrations
{
    [DbContext(typeof(KpiDbContext))]
    partial class KpiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KpiApi.Models.AssignedKpi", b =>
                {
                    b.Property<int>("AssignedKpiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assigned_kpi_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignedKpiId"));

                    b.Property<int?>("AssigneeDepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("assignee_department_id");

                    b.Property<int?>("AssigneeUserId")
                        .HasColumnType("int")
                        .HasColumnName("assignee_user_id");

                    b.Property<int>("KpiId")
                        .HasColumnType("int")
                        .HasColumnName("kpi_id");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int")
                        .HasColumnName("period_id");

                    b.Property<double?>("TargetValue")
                        .HasColumnType("float")
                        .HasColumnName("target_value");

                    b.Property<int?>("WeightPercent")
                        .HasColumnType("int")
                        .HasColumnName("weight_percent");

                    b.HasKey("AssignedKpiId");

                    b.HasIndex("AssigneeDepartmentId");

                    b.HasIndex("AssigneeUserId");

                    b.HasIndex("KpiId");

                    b.HasIndex("PeriodId");

                    b.ToTable("AssignedKpis", (string)null);
                });

            modelBuilder.Entity("KpiApi.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("department_name");

                    b.Property<int?>("ParentDepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_department_id");

                    b.HasKey("DepartmentId");

                    b.HasIndex("ParentDepartmentId");

                    b.ToTable("Departments", (string)null);
                });

            modelBuilder.Entity("KpiApi.Models.EvaluationAttachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("attachment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttachmentId"));

                    b.Property<int>("EvaluationId")
                        .HasColumnType("int")
                        .HasColumnName("evaluation_id");

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("file_path");

                    b.HasKey("AttachmentId");

                    b.HasIndex("EvaluationId");

                    b.ToTable("EvaluationAttachments", (string)null);
                });

            modelBuilder.Entity("KpiApi.Models.EvaluationPeriod", b =>
                {
                    b.Property<int>("PeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("period_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PeriodId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date");

                    b.Property<string>("PeriodName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("period_name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.HasKey("PeriodId");

                    b.ToTable("EvaluationPeriods", (string)null);
                });

            modelBuilder.Entity("KpiApi.Models.FinalResult", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("result_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultId"));

                    b.Property<string>("CompletionLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("completion_level");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<string>("FinalRank")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("final_rank");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int")
                        .HasColumnName("period_id");

                    b.Property<double?>("TotalKpiScore")
                        .HasColumnType("float")
                        .HasColumnName("total_kpi_score");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ResultId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("UserId");

                    b.ToTable("FinalResults", (string)null);
                });

            modelBuilder.Entity("KpiApi.Models.Kpi", b =>
                {
                    b.Property<int>("KpiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("kpi_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KpiId"));

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("KpiName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("kpi_name");

                    b.Property<string>("KpiType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("kpi_type");

                    b.Property<string>("MeasurementUnit")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("measurement_unit");

                    b.HasKey("KpiId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Kpis", (string)null);
                });

            modelBuilder.Entity("KpiApi.Models.KpiEvaluation", b =>
                {
                    b.Property<int>("EvaluationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("evaluation_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EvaluationId"));

                    b.Property<int>("AssignedKpiId")
                        .HasColumnType("int")
                        .HasColumnName("assigned_kpi_id");

                    b.Property<double?>("FinalScore")
                        .HasColumnType("float")
                        .HasColumnName("final_score");

                    b.Property<double?>("ManagerAssessedScore")
                        .HasColumnType("float")
                        .HasColumnName("manager_assessed_score");

                    b.Property<string>("ManagerComment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("manager_comment");

                    b.Property<double?>("SelfAssessedScore")
                        .HasColumnType("float")
                        .HasColumnName("self_assessed_score");

                    b.Property<string>("SelfComment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("self_comment");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("status");

                    b.HasKey("EvaluationId");

                    b.HasIndex("AssignedKpiId");

                    b.ToTable("KpiEvaluations", (string)null);
                });

            modelBuilder.Entity("KpiApi.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("KpiApi.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("job_title");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("KpiApi.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("KpiApi.Models.AssignedKpi", b =>
                {
                    b.HasOne("KpiApi.Models.Department", "AssigneeDepartment")
                        .WithMany("AssignedKpis")
                        .HasForeignKey("AssigneeDepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("KpiApi.Models.User", "AssigneeUser")
                        .WithMany("AssignedKpis")
                        .HasForeignKey("AssigneeUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("KpiApi.Models.Kpi", "Kpi")
                        .WithMany("AssignedKpis")
                        .HasForeignKey("KpiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KpiApi.Models.EvaluationPeriod", "Period")
                        .WithMany("AssignedKpis")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssigneeDepartment");

                    b.Navigation("AssigneeUser");

                    b.Navigation("Kpi");

                    b.Navigation("Period");
                });

            modelBuilder.Entity("KpiApi.Models.Department", b =>
                {
                    b.HasOne("KpiApi.Models.Department", "ParentDepartment")
                        .WithMany("ChildDepartments")
                        .HasForeignKey("ParentDepartmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentDepartment");
                });

            modelBuilder.Entity("KpiApi.Models.EvaluationAttachment", b =>
                {
                    b.HasOne("KpiApi.Models.KpiEvaluation", "Evaluation")
                        .WithMany("Attachments")
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluation");
                });

            modelBuilder.Entity("KpiApi.Models.FinalResult", b =>
                {
                    b.HasOne("KpiApi.Models.Department", "Department")
                        .WithMany("FinalResults")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("KpiApi.Models.EvaluationPeriod", "Period")
                        .WithMany("FinalResults")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KpiApi.Models.User", "User")
                        .WithMany("FinalResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");

                    b.Navigation("Period");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KpiApi.Models.Kpi", b =>
                {
                    b.HasOne("KpiApi.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("KpiApi.Models.KpiEvaluation", b =>
                {
                    b.HasOne("KpiApi.Models.AssignedKpi", "AssignedKpi")
                        .WithMany("KpiEvaluations")
                        .HasForeignKey("AssignedKpiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedKpi");
                });

            modelBuilder.Entity("KpiApi.Models.User", b =>
                {
                    b.HasOne("KpiApi.Models.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");
                });

            modelBuilder.Entity("KpiApi.Models.UserRole", b =>
                {
                    b.HasOne("KpiApi.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KpiApi.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KpiApi.Models.AssignedKpi", b =>
                {
                    b.Navigation("KpiEvaluations");
                });

            modelBuilder.Entity("KpiApi.Models.Department", b =>
                {
                    b.Navigation("AssignedKpis");

                    b.Navigation("ChildDepartments");

                    b.Navigation("FinalResults");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("KpiApi.Models.EvaluationPeriod", b =>
                {
                    b.Navigation("AssignedKpis");

                    b.Navigation("FinalResults");
                });

            modelBuilder.Entity("KpiApi.Models.Kpi", b =>
                {
                    b.Navigation("AssignedKpis");
                });

            modelBuilder.Entity("KpiApi.Models.KpiEvaluation", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("KpiApi.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("KpiApi.Models.User", b =>
                {
                    b.Navigation("AssignedKpis");

                    b.Navigation("FinalResults");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
